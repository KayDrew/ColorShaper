<body onload="playGame()">
    <div class="container">
        <div class="questionSection">
            <h2>{{randomQuestion.question}}</h2>
        </div>
        <div class="timer">
            {{#if messages.error}}
            {{!-- message class is used by js to hide message after 3 seconds --}}
            {{!-- msgError/msgSuccess is used to style the message accordingly --}}
            <span class="message msgError">
                {{messages.error}}
            </span>
            {{/if}}
            <div class="timerTitle"><h4>remaining time :<span class="countDown">00:10</span></h4></div>
            {{!-- We should add handlebars here for a dynamic timer based on the settings if we got time--}}
            {{#if messages.success}}
            {{!-- message class is used by js to hide message after 3 seconds --}}
            {{!-- msgError/msgSuccess is used to style the message accordingly --}}
            <span class="message msgSuccess">
                {{messages.success}}
            </span>
            {{/if}}
        </div>
        
        <div id="webcam-container" class="cameraViewBox"></div>

       


        <div class="hidden" style="display:none">
            <audio controls loop id="music">
                <source src="music.ogg" type="audio/ogg">
                <source src="music.mp3" type="audio/mpeg">
                Your browser does not support the audio element.
            </audio>

        </div>
    </div>
</body>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>
<script type="text/javascript">
    // More API functions here:
    // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

    // the link to your model provided by Teachable Machine export panel
    const URL = "https://teachablemachine.withgoogle.com/models/0ipS3AKwb/";

    let model, webcam, labelContainer, maxPredictions;

    // Load the image model and setup the webcam
    async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        // load the model and metadata
        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
        // or files from your local hard drive
        // Note: the pose library adds "tmImage" object to your window (window.tmImage)
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // Convenience function to setup a webcam
        const flip = true; // whether to flip the webcam
        webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
        await webcam.setup(); // request access to the webcam
        await webcam.play();
        window.requestAnimationFrame(loop);

        // append elements to the DOM
        document.getElementById("webcam-container").appendChild(webcam.canvas);
        labelContainer = document.getElementById("label-container");
        for (let i = 0; i < maxPredictions; i++) { // and class labels
            labelContainer.appendChild(document.createElement("div"));
        }
    }

    async function loop() {
        webcam.update(); // update the webcam frame
        await predict();
        window.requestAnimationFrame(loop);
    }

    // run the webcam image through the image model
    async function predict() {
        // predict can take in an image, video or canvas html element
        const prediction = await model.predict(webcam.canvas);
        for (let i = 0; i < maxPredictions; i++) {
            const classPrediction =
                prediction[i].className + ": " + prediction[i].probability.toFixed(2);
            labelContainer.childNodes[i].innerHTML = classPrediction;
        }
    }
</script>
<script>
let play = localStorage.getItem("play");
    let sound= localStorage.getItem("sound");


    let audio = document.querySelector("#music");
    audio.volume = 0.2;
    function playGame() {

        swal({
            title: "Dive In!",
            button: { text: "Yay!", className: "btn" },
            className: "alert"
        })
            .then((value) => {

                if (!play) {
                    play = "true";
                    localStorage.setItem("play",play);
                }

                if (value == true) {


                  
    setTimeout(() => {
        init();
            }, 2000);

                    
                
                        // Function for timer 
                        var seconds = 10;

                        function updateCountdown() {
                            var minutes = Math.floor(seconds / 60);
                            var remainingSeconds = seconds % 60;

                            // Basic syntanx for ternary operator (condition) ? valueIfTrue : valueIfFalse;
                            document.querySelector('.countDown').innerHTML = (minutes < 10 ? '0' : '') + minutes + ':' + (remainingSeconds < 10 ? '0' : '') + remainingSeconds;

                            if (seconds > 0) {
                                seconds--;
                            } else {
                                clearInterval(interval);
                                document.querySelector('.countDown').innerHTML = 'Next Question';
                            }
                        }


                        setTimeout(() => {
      
                        var interval = setInterval(updateCountdown, 1000)
                          }, 4000);



                    if (play == "true") {

                        var isPlaying = audio.currentTime > 0 && !audio.paused && !audio.ended
                            && audio.readyState > audio.HAVE_CURRENT_DATA;
                            
                
                        if (!isPlaying) {
                            audio.play();

                        }
                        else {
                            console.log("not playing")
                        }

                    }
                    
                    if(!sound){             
                    sound="true";
                    localStorage.setItem("sound",sound)
                    }
                    
                    else{
                    
                    if(sound=="true"){

                    if ('speechSynthesis' in window) {
                        // Speech Synthesis supported ðŸŽ‰

                        var msg = new SpeechSynthesisUtterance();
                        msg.text = "{{randomQuestion.question}}";
                        msg.pitch = 1.6;
                        msg.lang = "en"
                 
                        window.speechSynthesis.speak(msg);



                    } else {
                        // Speech Synthesis Not Supported ðŸ˜£
                        alert("Sorry, your browser doesn't support text to speech!");
                    }
                    }
                    
                    }
                }


            });
            
            
    }
</script>