<body onload="playGame()">
    <div class="container">
        <div class="questionSection">
            <h2 id="question">{{randomQuestion.question}}</h2>
        </div>
        <div class="timer">
            {{#if messages.error}}
            {{!-- message class is used by js to hide message after 3 seconds --}}
            {{!-- msgError/msgSuccess is used to style the message accordingly --}}
            <span class="message msgError">
                {{messages.error}}
            </span>
            {{/if}}
            <div class="timerTitle"><h4>remaining time :<span class="countDown">00:10</span></h4></div>
            {{!-- We should add handlebars here for a dynamic timer based on the settings if we got time--}}
            {{#if messages.success}}
            {{!-- message class is used by js to hide message after 3 seconds --}}
            {{!-- msgError/msgSuccess is used to style the message accordingly --}}
            <span class="message msgSuccess">
                {{messages.success}}
            </span>
            {{/if}}
        </div>
        <div  class="cameraViewBox">
        <div id="webcam-container"></div>
</div>
       


        <div class="hidden" style="display:none">
            <audio controls loop id="music">
                <source src="music.ogg" type="audio/ogg">
                <source src="music.mp3" type="audio/mpeg">
                Your browser does not support the audio element.
            </audio>

        </div>
    </div>
</body>

<script>

    let play = localStorage.getItem("play");
    let sound= localStorage.getItem("sound");
    const easyQuestions=['Show an image of a Triangle','Show an image of a Circle','Show an image of a Square','Show an image of a Oval','Show an image of a Rectangle'];
    let question='{{randomQuestion.question}}';
    let questionText= document.querySelector("#question");

    let audio = document.querySelector("#music");
    audio.volume = 0.2;
 
 async function playGame() {

        swal({
            title: "Dive In!",
            button: { text: "Yay!", className: "btn" },
            className: "alert"
        })
            .then((value) => {

                if (!play) {
                    play = "true";
                    localStorage.setItem("play",play);
                }

                if (value == true) {
                  
                       init(); 
                        playSound() 
                
                        // Function for timer 
                        var seconds = 10;
                        var interval;

                       async  function updateCountdown() {
                            var minutes = Math.floor(seconds / 60);
                            var remainingSeconds = seconds % 60;

                            // Basic syntanx for ternary operator (condition) ? valueIfTrue : valueIfFalse;
                            document.querySelector('.countDown').innerHTML = (minutes < 10 ? '0' : '') + minutes + ':' + (remainingSeconds < 10 ? '0' : '') + remainingSeconds;

                            if (seconds > 0) {
                                seconds--;
                                
                               let model = URL + "model.json";
                               let metadata = URL + "metadata.json";
                               model = await tmImage.load(model, metadata);

                            } else {
                                clearInterval(interval);

                                   swal({
                                   title: "Time's Up!",
                                  button: { text: "Try again", className: "btn" },
                                   className: "alert"
                                   }).then((value)=>{

                                    if(value){
                                
                                    question = easyQuestions[Math.floor(Math.random() * easyQuestions.length)];
                                    questionText.innerText=question;
                                    playSound();
                                    }   
                            
                             } );
                            
                            
                              
                            }
                        }
           
                      

                        setTimeout(() => {
      
                         interval = setInterval(updateCountdown, 1000)
                          }, 5000);



                    if (play == "true") {

                        var isPlaying = audio.currentTime > 0 && !audio.paused && !audio.ended
                            && audio.readyState > audio.HAVE_CURRENT_DATA;
                            
                
                        if (!isPlaying) {
                            audio.play();

                        }
                       

                    }


                   
                }




            });
            
            
    }
        let score = 0 

        const scoreElement = document.querySelector('#score');

        scoreElement.innerText = score

        const URL = "https://teachablemachine.withgoogle.com/models/0ipS3AKwb/";

           let model, webcam, labelContainer, maxPredictions;

    // Load the image model and setup the webcam
    async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // Convenience function to setup a webcam
        const flip = true; // whether to flip the webcam
        webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
        await webcam.setup(); // request access to the webcam
        await webcam.play();
        window.requestAnimationFrame(loop);

        // append elements to the DOM
        document.getElementById("webcam-container").appendChild(webcam.canvas);
      
    
       }

        
        async function loop() {
            webcam.update(); // update the webcam frame
            await predict();

            setTimeout(() => {
                window.requestAnimationFrame(loop);
            }, 1000);

        }
        let brutText=document.querySelector(".results");

        // run the webcam image through the image model
        async function predict() {


        // predict can take in an image, video or canvas html element
        const prediction = await model.predict(webcam.canvas);

         const circleData = prediction[0]
        const squareData = prediction[1]
        const triangleData = prediction[2]
        const rectangleData = prediction[3]
        const ovalData = prediction[4]
        const blueData = prediction[5]
        const redData = prediction[6]
        const yellowData = prediction[7]
        const hexagonData = prediction[8]
        const pentagonData = prediction[9]
        
        if(circleData.probability > 0.95 && '{{randomQuestion.question}}' === 'Show an image of a Circle'){
            console.log('Looks like a circle')
            score++
            scoreElement.innerText = score
            session.score = score;

                swal({
                title: "Correct!",
                icon: "success",
                button: { text: "Next", className: "btn" },
                className: "alert"
            }).then((value)=>{
                   //show next question
            question = easyQuestions[Math.floor(Math.random() * easyQuestions.length)];
            questionText.innerText=question;
            playSound();

            });
     

            //stop scannerr
             model=null;

            // Check if the score is above 3
            if (score > 2 && score < 6) {
                congratulatePlayer()
            }
        }

        if(squareData.probability > 0.95){
            console.log('Looks like a square')
            score++
            scoreElement.innerText = score;

                  swal({
                title: "Correct!",
                icon: "success",
                button: { text: "Next", className: "btn" },
                className: "alert"
            }).then((value)=>{
                   //show next question
            question = easyQuestions[Math.floor(Math.random() * easyQuestions.length)];
            questionText.innerText=question;
            playSound();

            });
     

            //stop scannerr
             model=null;

            // Check if the score is above 3
            if (score > 2 && score < 6) {
                congratulatePlayer()
            }
        }
        if(triangleData.probability > 0.95){
            console.log('Looks like a triangle')
            score++
            scoreElement.innerText = score

                  swal({
                title: "Correct!",
                icon: "success",
                button: { text: "Next", className: "btn" },
                className: "alert"
            }).then((value)=>{
                   //show next question
            question = easyQuestions[Math.floor(Math.random() * easyQuestions.length)];
            questionText.innerText=question;
            playSound();

            });
     

              //stop scannerr
             model=null;

            // Check if the score is above 3
            if (score > 2 && score < 6) {
                congratulatePlayer()
            }
        }
        if(rectangleData.probability > 0.95){
            console.log('Looks like a rectangle')
            score++
            scoreElement.innerText = score

                 swal({
                title: "Correct!",
                icon: "success",
                button: { text: "Next", className: "btn" },
                className: "alert"
            }).then((value)=>{
                   //show next question
            question = easyQuestions[Math.floor(Math.random() * easyQuestions.length)];
            questionText.innerText=question;
            playSound();

            });
     ;

              //stop scannerr
             model=null;

            // Check if the score is above 3
            if (score > 2 && score < 6) {
                congratulatePlayer()
            }
        }
        if(ovalData.probability > 0.95){
            console.log('Looks like an Oval')
            score++
            scoreElement.innerText = score

                   swal({
                title: "Correct!",
                icon: "success",
                button: { text: "Next", className: "btn" },
                className: "alert"
            }).then((value)=>{
                   //show next question
            question = easyQuestions[Math.floor(Math.random() * easyQuestions.length)];
            questionText.innerText=question;
            playSound();

            });
     

              //stop scannerr
             model=null;

            // Check if the score is above 3
            if (score > 2 && score < 6) {
                congratulatePlayer()
            }
        }
        if(blueData.probability > 0.95){
            console.log('Looks like the color Blue')
            score++
            scoreElement.innerText = score
              //stop scannerr
             model=null;

            // Check if the score is above 3
            if (score > 5 && score < 9) {
                congratulatePlayer()
            }
        }
        if(redData.probability > 0.95){
            console.log('Looks like the color Red')
            score++
            scoreElement.innerText = score
              //stop scannerr
             model=null;

            // Check if the score is above 3
            if (score > 5 && score < 9) {
                congratulatePlayer()
            }
        }
        if(yellowData.probability > 0.95){
            console.log('Looks like the color Yellow')
            score++
            scoreElement.innerText = score
              //stop scannerr
             model=null;

            // Check if the score is above 3
            if (score > 5 && score < 9) {
                congratulatePlayer()
            }
        }
        if(hexagonData.probability > 0.95){
            console.log('Looks like a Hexagon')
            score++
            scoreElement.innerText = score
              //stop scannerr
             model=null;

            // Check if the score is above 3
            if (score >= 9 ) {
                congratulatePlayer()
            }
        }
        if(pentagonData.probability > 0.95){
            console.log('Looks like a pentagon')
            score++
            scoreElement.innerText = score
              //stop scannerr
             model=null;

            // Check if the score is above 3
            if (score >= 9 ) {
                congratulatePlayer()
            }
        }

        }
		
	// Function to congratulate the player
        function congratulatePlayer() {
            swal({
                title: "Congratulations!",
                text: "You're doing great! Keep it up!",
                icon: "success",
                button: { text: "Thanks!", className: "btn" },
                className: "alert"
            });

        for(let i=0;i<prediction.length;++i){

        console.log(prediction[i]);}
    }


    
                    function playSound(){
                    
                    if(!sound){             
                    sound="true";
                    localStorage.setItem("sound",sound)
                    }
                    
                    else{
                    
                    if(sound=="true"){

                    if ('speechSynthesis' in window) {
                        // Speech Synthesis supported 🎉

                        var msg = new SpeechSynthesisUtterance();
                        msg.text = question;
                        msg.pitch = 1.6;
                        msg.lang = "en"
               
                        window.speechSynthesis.speak(msg);

                    } else {
                        // Speech Synthesis Not Supported 😣
                        alert("Sorry, your browser doesn't support text to speech!");
                    }
                    }
                    
                    }
                    }

</script>