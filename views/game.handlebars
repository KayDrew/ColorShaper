<body onload="playGame()">
    <div class="game-content">
        <div class="questionSection">
            <h2 id="question" class="animate__animated animate__zoomInDown">{{randomQuestion.question}}</h2>
        </div>
        <div class="timer">
            {{#if messages.error}}
            {{!-- message class is used by js to hide message after 3 seconds --}}
            {{!-- msgError/msgSuccess is used to style the message accordingly --}}
            <span class="message msgError">
                {{messages.error}}
            </span>
            {{/if}}
            <div class="timerTitle"><h4>remaining time :<span class="countDown">00:10</span></h4></div>
            {{!-- We should add handlebars here for a dynamic timer based on the settings if we got time--}}
            {{#if messages.success}}
            {{!-- message class is used by js to hide message after 3 seconds --}}
            {{!-- msgError/msgSuccess is used to style the message accordingly --}}
            <span class="message msgSuccess">
                {{messages.success}}
            </span>
            {{/if}}
        </div>
        <div id="webcam-container"></div>
        <!-- This div contains an audio element with controls, set to loop, and with an ID of "music" -->
        <div class="hidden" style="display:none">
            <!-- The audio element allows users to play and control audio playback -->
            <audio controls loop id="music">
                <!-- The source element specifies the audio file sources in different formats -->
                <source src="music.mp3" type="audio/mpeg"> <!-- MP3 audio format -->
                <!-- This text will be displayed if the browser does not support the audio element -->
                Your browser does not support the audio element.
            </audio>
        </div>
    </div>
</body>

<script>
    // Retrieve the "play" and "sound" values from local storage
    let play = localStorage.getItem("play");
    let sound = localStorage.getItem("sound");
    
   // Set up a timer with a countdown of 10 seconds
    let seconds = 10;
    let interval;

    // Array of easy questions for the game
    const easyQuestions =   [
                                'Show an image of a Circle', 
                                'Show an image of a Square', 
                                'Show an image of a Triangle', 
                                'Show an image of a Rectangle', 
                                'Show an image of an Oval'
                            ];
    const mediumQuestions = [
                                'Show something Blue', 
                                'Show something Red', 
                                'Show something Yellow'
                            ];
    const hardQuestions =   [
                                'Show an image of a Purple Circle', 
                                'Show an image of a Green Triangle', 
                                'Show an image of an Orange Oval'
                            ];
    // Retrieve the question from the server (assuming it's using some templating engine like Handlebars)
    let question = '{{randomQuestion.question}}';

    // Select the HTML element with the ID "question" to display the question
    let questionText = document.querySelector("#question");

    // Set initial values for player level and level index in local storage
     //localStorage.setItem('player-level', 'easy');
    // localStorage.setItem('level-index', '0');

    // Select the HTML audio element with the ID "music"
    let audio = document.querySelector("#music");

    // Set the volume of the audio to 0.2 (20%)
    audio.volume = 0.2;

    // Split the string '{{levels}}' into an array using ',' as the delimiter
    //let levels = '{{levels}}'.split(',');
    
    // Asynchronous function to start the game
    async function playGame() {


        // Display a SweetAlert with a title and a "Yay!" button
        swal({
            title: "Dive In!",
            button: { text: "Yay!", className: "btn" },
            className: "alert"
        }).then((value) => { // Handle the promise returned by SweetAlert

            // If "play" is not set, set it to "true" in local storage
            if (!play) {
                play = "true";
                localStorage.setItem("play", play);
            }

            // If the player clicks "Yay!" in the SweetAlert
            if (value == true) {

                // Initialize the game
                init();
                // Play a sound
                playSound();


         

                // Set up the timer to start after a delay of 5 seconds
                setTimeout(() => {
                    interval = setInterval(updateCountdown, 1000);
                }, 5000);


                      function timeUp(){

                            if(seconds==0){

                                model=null;

                             swal({
                                   title: "Time's Up!",
                                  button: { text: "Try again", className: "btn" },
                                   className: "alert"
                                   }).then((value)=>{

                                    if(value){
                                        refreshQuestion();
                                    }   
                            
                             } );

                            }

                       }
                       
            setInterval(timeUp, 1400)



                // If "play" is set to "true," check if audio is playing and start playing if not
                if (play == "true") {
                    var isPlaying = audio.currentTime > 0 && !audio.paused && !audio.ended && audio.readyState > audio.HAVE_CURRENT_DATA;

                    if (!isPlaying) {
                        audio.play();
                    }
                }
            }
        });
    }

    // Load the score from localStorage or set it to 0 if not present
    let score = localStorage.getItem("score") || 0;
    let levelIndex = localStorage.getItem('level-index') || 0;

    // Check if the levelIndex is greater than 2 and reset it to 0 if true
    if (levelIndex > 2) {
        levelIndex = 0;
    }

    // Update the score element
    const scoreElement = document.querySelector('#score');
    scoreElement.innerText = score;

    // Update the current level element
    const levelElement = document.querySelector('#currentLevel');
    // Set the player level from localStorage or use the default level based on the levelIndex
    let currentLevel

    if(localStorage.getItem('player-level')){
        currentLevel = localStorage.getItem('player-level');
    }else{
        localStorage.setItem('player-level', 'easy');
        currentLevel = localStorage.getItem('player-level');
    }

    levelElement.innerText = currentLevel;

    // URL for the Teachable Machine model
    const URL = "https://teachablemachine.withgoogle.com/models/0ipS3AKwb/";

    // Variables for the Teachable Machine model, webcam, and predictions
    let model, webcam, labelContainer, maxPredictions;

    // Load the image model and set up the webcam
    async function init() {
        // URLs for the model and metadata
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        // Load the Teachable Machine image model
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // Set up the webcam
        const flip = true; // whether to flip the webcam
        webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
        await webcam.setup(); // request access to the webcam
        await webcam.play();
        window.requestAnimationFrame(loop);

        // Append the webcam canvas to the DOM
        document.getElementById("webcam-container").appendChild(webcam.canvas);
    }
    
    // Asynchronous function to continuously loop through webcam updates and predictions
    async function loop() {
        // Update the webcam frame
        webcam.update();
        
        // Asynchronously predict based on the webcam frame
        await predict();

        // Set a timeout to request the next animation frame after 1000 milliseconds (1 second)
        setTimeout(() => {
            window.requestAnimationFrame(loop);
        }, 1000);
    }

    // Asynchronous function to make predictions based on the webcam frame
    async function predict() {

        
                        // Load a machine learning model using the Teachable Machine API
                        let modelU = URL + "model.json";
                        let metadata = URL + "metadata.json";
                        model = await tmImage.load(modelU, metadata);

        // Predictions based on the webcam frame
        const prediction = await model.predict(webcam.canvas);

        // Extract probability data for different shapes and colors
        const circleData = prediction[0];
        const squareData = prediction[1];
        const triangleData = prediction[2];
        const rectangleData = prediction[3];
        const ovalData = prediction[4];
        const blueData = prediction[5];
        const redData = prediction[6];
        const yellowData = prediction[7];
        const purpleCircleData = prediction[8];
        const greenTriangleData = prediction[9];
        const orangeOvalData = prediction[10];
        
        handlePrediction(circleData.probability, easyQuestions[0], 'circle');
        handlePrediction(squareData.probability, easyQuestions[1], 'square');
        handlePrediction(triangleData.probability, easyQuestions[2], 'triangle');
        handlePrediction(rectangleData.probability, easyQuestions[3], 'rectangle');
        handlePrediction(ovalData.probability, easyQuestions[4], 'oval');
        handlePrediction(blueData.probability, mediumQuestions[0], 'blue');
        handlePrediction(redData.probability, mediumQuestions[1], 'red');
        handlePrediction(yellowData.probability, mediumQuestions[2], 'yellow');
        handlePrediction(purpleCircleData.probability, hardQuestions[0], 'purple circle');
        handlePrediction(greenTriangleData.probability, hardQuestions[1], 'green triangle');
        handlePrediction(orangeOvalData.probability, hardQuestions[2], 'orange oval');
    }

    function handlePrediction(probability, expectedQuestion, shapeType) {
        //'{{randomQuestion.question}}'
        console.log(probability,question,expectedQuestion,shapeType);
        // Check if the predicted shape has high probability and matches the expected question
        if (probability > 0.95 && question === expectedQuestion) {
            console.log(`Shape and/or Color: ${shapeType}`);

            // Increment the score and update the score element
            score++;
            scoreElement.innerText = score;

            // Store the updated score in localStorage
            localStorage.setItem("score", score);
            

            // Stop the scanner (assuming 'model' refers to the Teachable Machine model)
            model = null;
            
                //stop the timer
                 clearInterval(interval);

            // Display a success message using SweetAlert and proceed to the next question
            swal({
                title: "Correct!",
                icon: "success",
                button: { text: "Next", className: "btn" },
                className: "alert"
            }).then(() => {
                refreshQuestion();
            });

            // Check if the score is between 3 and 5
            //if (score > 2 && score < 6) {
            //    congratulatePlayer();
            //}

            // Level Up
            levelUp(score);
        }
    }
    
    function levelUp(score) {
        // Check score range and congratulate accordingly

        if (score == 5) {
            // Easy level
            // Increase level to medium  
            localStorage.setItem('player-level','Medium');
            levelElement.innerText = localStorage.getItem('player-level');

            // give congrats
            congratulatePlayer();
            
            //question = randomQuestion();
                //question = mediumQuestions[Math.floor(Math.random() * mediumQuestions.length)];
            // give new question based on medium level
        }else
        if (score == 8) {
            // Medium level
            // Increase level to hard
            localStorage.setItem('player-level','Hard');
            levelElement.innerText = localStorage.getItem('player-level');
            // give congrats
            congratulatePlayer();
            
            //question = randomQuestion();
                //question = hardQuestions[Math.floor(Math.random() * hardQuestions.length)];
            // give new question based on hard level
        }else        
        if (score == 11 ) {
            // Hard level
            // give congrats on completing the game
            //congratulatePlayer();  
        }
        
    }
	// This function is called to show a new question and reset the timer
    function refreshQuestion() {
        //start scanner
        startScanner();

        // Show the next question
        question = randomQuestion();//easyQuestions[Math.floor(Math.random() * easyQuestions.length)];
        questionText.innerText = question;
        playSound();

        //reset timer
        seconds=10;
        interval = setInterval(updateCountdown, 1000);
    }

    function randomQuestion(){
        console.log('Player level: '+localStorage.getItem('player-level'));
        if(localStorage.getItem('player-level') === "Medium"){
            return mediumQuestions[Math.floor(Math.random() * mediumQuestions.length)]
        }
        else if(localStorage.getItem('player-level') === 'Hard'){
            return hardQuestions[Math.floor(Math.random() * hardQuestions.length)]
        }
        else{
            return easyQuestions[Math.floor(Math.random() * easyQuestions.length)]
        }
    }

	// Function to congratulate the player
    function congratulatePlayer() {
        // Display a SweetAlert with a congratulatory message
        swal({
            title: "Congratulations!",
            text: "You've reached a higher level!",
            icon: "success",
            button: { text: "Thanks!", className: "btn" },
            className: "alert"
        }).then(() => {
                refreshQuestion();
            });

        // Log each element in the 'prediction' array to the console
        /*for (let i = 0; i < prediction.length; ++i) {
            console.log(prediction[i]);
        }*/
    }

    function playerLevel(){
        //use global levels array and levelIndex    
    }

    // Function to play a sound (text-to-speech) for the current question
    function playSound() {
        // Check if the 'sound' variable is not set (undefined or null)
        if (!sound) {
            // If not set, initialize 'sound' to "true" and store it in localStorage
            sound = "true";
            localStorage.setItem("sound", sound);
        } else {
            // Check if 'sound' is set to "true"
            if (sound === "true") {
                // Check if Speech Synthesis is supported in the browser
                if ('speechSynthesis' in window) {
                    // Speech Synthesis supported 🎉

                    // Create a SpeechSynthesisUtterance object
                    var msg = new SpeechSynthesisUtterance();
                    // Set the text to be spoken to the current question
                    msg.text = question;
                    // Set the pitch of the voice
                    msg.pitch = 1.6;
                    // Set the language for speech synthesis
                    msg.lang = "en";

                    // Use the SpeechSynthesis API to speak the text
                    window.speechSynthesis.speak(msg);

                } else {
                    // Speech Synthesis Not Supported 😣
                    // Display an alert if text-to-speech is not supported in the browser
                    alert("Sorry, your browser doesn't support text-to-speech!");
                }
            }
        }
    }

   async function startScanner(){
    }


           // Function to update the countdown timer
                async function updateCountdown() {
                    var minutes = Math.floor(seconds / 60);
                    var remainingSeconds = seconds % 60;

                    // Update the timer display
                    document.querySelector('.countDown').innerHTML = (minutes < 10 ? '0' : '') + minutes + ':' + (remainingSeconds < 10 ? '0' : '') + remainingSeconds;

                    if (seconds > 0) {
                        seconds--;


                    } else {
                        // Stop the timer when it reaches zero
                        clearInterval(interval);
                     

                    }

                }
</script>